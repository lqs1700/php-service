1.查看composer.json,里面要求的worker版本，然后安装相对应版本，如下（我的1.0）
composer require topthink/think-worker 1.0

2.删除workerman下的workerman文件夹，然后执行
composer require workerman/workerman-for-win


3.index模块下index.php文件的代码

<?php
namespace app\index\controller;

class Index
{
    public function index()
    {
        return view('',[]);
    }
}

4.index模块下模板文件index.html的代码
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title></title>
    <style>
        #submit{width: 50px;}
        p{padding: 0;margin: 0;}
        br{height: 0;}
    </style>
</head>
<body>
<div>
    <input id="itext" type="text" required>
    <input type="button" id="submit" value="提交" onclick="submitmes()">
    <div id="test"></div>
</div>
<script type="text/javascript">
    // 假设服务端ip为127.0.0.1
    ws = new WebSocket("ws://127.0.0.1:2346");

    ws.onopen = function() {
        console.log("连接成功");
        var itext = document.getElementById('itext').value;
        ws.send(itext);
    };

    var submitmes = function(){
        var itext = document.getElementById('itext').value;
        ws.send(itext);
    };

    ws.onmessage = function(e) {
        var ptest = document.getElementById('test');
        if(e.data){
            console.log("收到服务端的消息：" + e.data);
            ptest.innerHTML += "<p>"+e.data+"</p>";
        }
    };

</script>
</body>
</html>

5.push模块下worker.php的代码
<?php

<?php

namespace app\push\controller;

use think\worker\Server;

class Worker extends Server
{
    protected $socket = 'websocket://127.0.0.1:2346';

    public function index(){
        $this->start();
    }
    /**
     * 收到信息
     * @param $connection
     * @param $data
     */
    public function onMessage($connection, $data)
    {
        foreach ($this->worker->connections as $conn) {
            $conn->send((string)$data);
        }
    }

    /**
     * 当连接建立时触发的回调函数
     * @param $connection
     */
    public function onConnect($connection)
    {
        $connection->send("连接成功");
    }

    /**
     * 当连接断开时触发的回调函数
     * @param $connection
     */
    public function onClose($connection)
    {

    }
    /**
     * 当客户端的连接上发生错误时触发
     * @param $connection
     * @param $code
     * @param $msg
     */
    public function onError($connection, $code, $msg)
    {
        echo "error $code $msg\n";
    }

    /**
     * 每个进程启动
     * @param $worker
     */
    public function onWorkerStart($worker)
    {

    }
}


6.public文件夹下server.php文件的代码

<?php
define('APP_PATH', __DIR__ . '/application/');
define('BIND_MODULE','push/Worker');
// 加载框架引导文件
require __DIR__ . '/../thinkphp/start.php';

7.启动服务器，cmd进入php安装目录执行 public/socket.php,如下：
E:\wamp64\bin\php\php5.6.25>php E:\wamp64\www\tp505\public\server.php

8.网页上打开项目/public,f12显示：
连接成功 
给服务端发送一个字符串：tom 
收到服务端的消息：hello tom

完毕！
